{"version":3,"sources":["images/computers.jpg","images/TicTacToe.jpg","images/coderTestBg.jpg","components/Navigator.js","components/Projects.js","components/Title.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Styles","styled","div","Navigator","Navbar","fixed","sticky","variant","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","NavDropdown","title","Item","Divider","Projects","Card","style","width","margin","Img","src","require","Body","Title","Text","Button","Component","computers","Jumbotron","fluid","Container","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,uC,4ECA3CD,EAAOC,QAAU,IAA0B,uC,wCCA3CD,EAAOC,QAAU,IAA0B,yC,mYCc3C,IAAMC,EAASC,IAAOC,IAAV,KAgCGC,EAtBU,kBACrB,kBAACH,EAAD,KACI,kBAACI,EAAA,EAAD,CAAQC,MAAM,MAAMC,OAAO,MAAOC,QAAQ,OAAOC,OAAO,MACpD,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,SAAnB,eACA,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,qBAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,SAAf,QACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,SAAf,QACA,kBAACQ,EAAA,EAAD,CAAaC,MAAM,WAAWL,GAAG,sBAC7B,kBAACI,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,UACA,kBAACQ,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,kBACA,kBAACQ,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,aACA,kBAACQ,EAAA,EAAYG,QAAb,MACA,kBAACH,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,wB,iBCHTY,E,iLAlBP,OAGI,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,QAASC,OAAQ,SACnC,kBAACH,EAAA,EAAKI,IAAN,CAAUpB,QAAQ,MAAMqB,IAAKC,EAAQ,MACrC,kBAACN,EAAA,EAAKO,KAAN,KACI,kBAACP,EAAA,EAAKQ,MAAN,mBACA,kBAACR,EAAA,EAAKS,KAAN,uGAIA,kBAACC,EAAA,EAAD,CAAQ1B,QAAQ,WAAhB,sB,GAbG2B,a,sxCCCvB,IAAMlC,EAASC,IAAOC,IAAV,IAEciC,KA8EXJ,EAvBM,kBACjB,kBAAC,EAAD,KACI,kBAACK,EAAA,EAAD,CAAWC,OAAK,GACZ,yBAAKrB,UAAU,kBACf,kBAACsB,EAAA,EAAD,CAAWtB,UAAU,gBACjB,6CACA,yBAAKF,GAAG,WACR,2EACA,2GAAgF,6BAAhF,uCACwC,6BADxC,uHAKA,6EAEJ,kBAACwB,EAAA,EAAD,CAAWtB,UAAU,gBACjB,4GADJ,QCjDGuB,G,6LAhBX,OACE,oCACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAZUL,cCTEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f558cbf1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/computers.46a6c6c1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/TicTacToe.47ffb911.jpg\";","module.exports = __webpack_public_path__ + \"static/media/coderTestBg.342a8058.jpg\";","/**\r\n * Navbar.js\r\n * Will Strong; Nov 7, 2019\r\n * NavBar for React/Bootstrap WebPage\r\n */\r\n\r\nimport React from 'react';\r\nimport {\r\n    Navbar,\r\n    NavDropdown,\r\n    Nav\r\n} from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\n\r\nconst Styles = styled.div`\r\n    .navbar{\r\n        background-color:black;\r\n        top: 0;\r\n        width: 100%;\r\n        z-index: 1;\r\n        margin:0;\r\n    }\r\n\r\n`;\r\nexport const Navigator = () => ( \r\n    <Styles>\r\n        <Navbar fixed=\"top\" sticky=\"top\"  variant=\"dark\" expand=\"lg\">\r\n            <Navbar.Brand href=\"#home\">Will Strong</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link href=\"#home\">Home</Nav.Link>\r\n                    <Nav.Link href=\"#link\">Link</Nav.Link>\r\n                    <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n                        <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n                        <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n                        <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n                        <NavDropdown.Divider />\r\n                        <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    </Styles>\r\n);\r\n\r\nexport default Navigator;","import React, { Component } from 'react';\r\n\r\nimport { \r\n    Button,\r\n    //Carousel,\r\n    Card\r\n } from 'react-bootstrap';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\nclass Projects extends Component {\r\n    render() {\r\n        return (\r\n\r\n            \r\n            <Card style={{ width: '18rem', margin: '20px' }}>\r\n                <Card.Img variant=\"top\" src={require('../images/TicTacToe.jpg')} />\r\n                <Card.Body>\r\n                    <Card.Title>Card Title</Card.Title>\r\n                    <Card.Text>\r\n                        Some quick example text to build on the card title and make up the bulk of\r\n                        the card's content.\r\n                    </Card.Text>\r\n                    <Button variant=\"primary\">Go somewhere</Button>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Projects;","/**\r\n * Title.js\r\n * Will Strong; \r\n */\r\n\r\nimport React from 'react';\r\nimport {\r\n    Jumbotron,\r\n    Container\r\n} from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\n\r\n//assets\r\nimport computers from '../images/computers.jpg';\r\n\r\n//CSS module\r\nconst Styles = styled.div`\r\n    .jumbotron{\r\n        background: url(${computers}) no-repeat fixed bottom;\r\n        background-size: cover;\r\n        color: white;\r\n        width:100%;\r\n        height: 100vh;\r\n        margin-bottom:0px;\r\n        position: relative;\r\n        z-index: -2;\r\n        top: 0;\r\n    }\r\n    .title-overlay{\r\n        background-color: black;\r\n        opacity: 0.75;\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        bottom: 0;\r\n        right: 0;\r\n        z-index:-1;\r\n    }\r\n\r\n    .title-header{\r\n        margin:100px;\r\n        width: 600px;\r\n        height: 50%;    \r\n    }\r\n    .title-footer{\r\n        text-align: center;\r\n        position: absolute;\r\n        left: 0px;\r\n        right: 0px;\r\n        bottom: 20px;\r\n        width: 100% ;\r\n    }\r\n    h1{\r\n        font-family: 'Lucida Console';\r\n        font-size: 60px;\r\n        margin-bottom: 20px;\r\n\r\n    }\r\n    #cursor {\r\n        background: white;\r\n        line-height: 60px;\r\n        width: 6px;\r\n        height: 60px;\r\n        margin-bottom: 20px;\r\n        animation: blink 1.5s step-end infinite;\r\n    }\r\n    @keyframes blink{\r\n        0% { opacity: 1.0; }\r\n        50% { opacity: 0.0; }\r\n        100% { opacity: 1.0; }\r\n    }\r\n`;\r\n\r\nexport const Title = () => (\r\n    <Styles>\r\n        <Jumbotron fluid>\r\n            <div className=\"title-overlay\"></div>\r\n            <Container className=\"title-header\">\r\n                <h1>Hello, World!</h1>\r\n                <div id=\"cursor\"></div>\r\n                <h3>My name is Will Strong, and I love to code!</h3>\r\n                <p> Whether it's writing a desktop application for managing a customer database;<br/>\r\n                    creating visually stunning web apps;<br/>\r\n                    or going to bare metal with Assembly or C,\r\n                    I find great fullfilment in the science and art of software engineering.\r\n                </p>\r\n                <p>Yes. This is actually a picture of my desktop</p>\r\n            </Container>\r\n            <Container className=\"title-footer\">\r\n                <p>Please keep scrolling to find out more about me and what I've been working on</p>\r\n                V\r\n            </Container>\r\n        </Jumbotron>\r\n    </Styles>\r\n)\r\n\r\nexport default Title;\r\n","/**\n * App.js\n * Will Strong; Nov 8, 2019\n * Main App Layout for Portfolio WePage\n */\n\n\n//React and Bootstrap Headers\nimport 'holderjs';\nimport React, { Component } from 'react';\n\n//Components\nimport Navigator from './components/Navigator';\nimport Projects from './components/Projects';\nimport Title from './components/Title';\n\n//Other Resources\nimport './css/App.css';\nimport './images/coderTestBg.jpg';\nimport './images/computers.jpg';\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <div>\n          <Title/>\n          <Navigator />\n        </div>\n        <Projects />\n        <Projects />\n        <Projects />\n        <Projects />\n        <Projects />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}